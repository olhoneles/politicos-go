// Copyright (c) 2020, Marcelo Jorge Vieira
// Licensed under the AGPL-3.0+ License

package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/olhoneles/politicos-go/db"
	_ "github.com/olhoneles/politicos-go/docs" // docs is generated by Swag CLI
	"github.com/spf13/viper"
	echoSwagger "github.com/swaggo/echo-swagger"
	"gopkg.in/go-playground/validator.v9"
)

const Version = "0.1.0"

type Server interface {
	http.Handler
	Start()
}

type server struct {
	*echo.Echo
	db db.DB
}

func (s *server) Start() {
	addr := fmt.Sprintf(":%d", viper.GetInt("port"))
	s.Echo.Logger.Fatal(s.Echo.Start(addr))
}

type CustomValidator struct {
	validator *validator.Validate
}

func (cv *CustomValidator) Validate(i interface{}) error {
	return cv.validator.Struct(i)
}

func NewServerFromDB() (Server, error) {
	echoInstance := echo.New()
	echoInstance.HideBanner = true
	dbInstance, err := db.NewMongoSession()
	if err != nil {
		return nil, err
	}

	server := &server{
		Echo: echoInstance,
		db:   dbInstance,
	}

	echoInstance.Use(
		middleware.LoggerWithConfig(
			middleware.LoggerConfig{
				Format: "timestamp=${time_rfc3339} " +
					"method=${method} " +
					"request_uri=${uri} " +
					"status=${status} " +
					"latency=${latency_human}\n",
			},
		),
	)
	echoInstance.Use(middleware.Recover())
	// FIXME
	echoInstance.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{echo.GET, echo.OPTIONS},
	}))
	echoInstance.Pre(middleware.RemoveTrailingSlash())

	echoInstance.GET("/", server.index)
	echoInstance.GET("/healthcheck", server.healthcheck)
	echoInstance.GET("/swagger/*", echoSwagger.WrapHandler)

	echoInstance.GET("/api/v1/candidacies-status", server.getAllCandidaciesStatus)
	echoInstance.GET("/api/v1/candidatures", server.getAllCandidatures)
	echoInstance.GET("/api/v1/educations", server.getAllEducations)
	echoInstance.GET("/api/v1/political-offices", server.getAllPoliticalOffices)
	echoInstance.GET("/api/v1/political-parties", server.getAllPoliticalParties)
	echoInstance.GET("/api/v1/politicians", server.getAllPoliticians)

	return server, nil
}
